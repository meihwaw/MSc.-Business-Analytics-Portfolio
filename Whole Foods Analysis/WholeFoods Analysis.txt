USE bos_ddmban_sql_analysis;

-- Author: Mei Hwa Wong
-- Assignment A1: SQL Analysis Assessment (Whole Foods)

-- Does the amount of badges increases price?
-- to identify overall average price and standard deviation between no badges and with badges
SELECT DISTINCT number_of_badges_level,
	   COUNT(wf_product_id)         OVER(PARTITION BY number_of_badges_level) AS count_of_badges,
	   FORMAT(AVG(regular_price)    OVER(PARTITION BY number_of_badges_level),2) AS average_regular_price,
       FORMAT(STDDEV(regular_price) OVER(PARTITION BY number_of_badges_level),2) AS standard_deviation_of_regular_price
FROM (
	 SELECT *,
            CASE WHEN sum_badges = 0  THEN 'zero badges'
				 WHEN sum_badges <> 0 THEN 'with badges'
                 END AS number_of_badges_level
FROM bmbandd_data) AS subquery
	   WHERE wf_product_id NOT IN (SELECT wf_product_id -- subquery to remove duplicate products
                                          FROM bmbandd_data
                                               GROUP BY wf_product_id
											   HAVING COUNT(wf_product_id) > 1)
         AND regular_price NOT IN (SELECT regular_price -- subquery to remove prices = 0
								          FROM bmbandd_data
											   WHERE regular_price = 0
                                               GROUP BY regular_price)
       ORDER BY number_of_badges_level
;

-- to create bins for sum of badges
SELECT DISTINCT sum_badges, 
       NTILE(4) OVER(ORDER BY sum_badges) AS badges_bin
FROM bmbandd_data
      WHERE sum_badges <> 0
      GROUP BY sum_badges
;
-- Results for NTILE(4)
-- quartile 1: 1 to 3
-- quartile 2: 4 to 6
-- quartile 3: 7 to 9
-- quartile 4: 10 to 12

WITH badge_level AS (SELECT *,
                     CASE WHEN sum_badges = 0        THEN 'no badges'
                     WHEN sum_badges IN (1, 2, 3)    THEN '1 to 3 number of badges'
                     WHEN sum_badges IN (4, 5, 6)    THEN '4 to 6 number of badges'
                     WHEN sum_badges IN (7, 8, 9)    THEN '7 to 9 number of badges'
                     WHEN sum_badges IN (10, 11, 12) THEN '10 to 12 number of badges' 
                     END AS number_of_badges_level
FROM bmbandd_data)

SELECT  DISTINCT number_of_badges_level,
        COUNT(wf_product_id)         OVER(PARTITION BY number_of_badges_level) AS total_products,
        FORMAT(AVG (regular_price)   OVER(PARTITION BY number_of_badges_level),2) AS average_regular_price,
        FORMAT(STDDEV(regular_price) OVER(PARTITION BY number_of_badges_level),2) AS standard_deviation_for_regular_price
FROM badge_level
       WHERE wf_product_id NOT IN (SELECT wf_product_id
                                   FROM bmbandd_data
                                   GROUP BY wf_product_id
	                               HAVING COUNT(wf_product_id) > 1)
		 AND regular_price NOT IN (SELECT regular_price
                                     FROM bmbandd_data
       WHERE regular_price = 0
       GROUP BY regular_price)

    ORDER BY number_of_badges_level ASC
;

-- INSIGHT 1
-- overall average price and standard deviation regular price split between food and non-food category 
WITH food AS (SELECT *, -- CTE to create food category
			  CASE WHEN sum_badges = 0 	              THEN 'no badges'
                   WHEN sum_badges IN (1,2, 3, 4, 5)  THEN 'low number of badges'
				   WHEN sum_badges IN (6, 7, 8,9)     THEN 'moderate number of badges'
				   ELSE 'high number of badges'       END AS number_of_badges_level,
              CASE WHEN category                      NOT IN ('beauty', 'body care', 'floral', 'lifestyle') THEN 'is food'
                   ELSE 'is non food'                 END AS big_category
FROM bmbandd_data
     WHERE category NOT IN ('beauty', 'body care', 'floral', 'lifestyle')
),
non_food AS (SELECT *, -- CTE to create non_food category
              CASE WHEN sum_badges = 0 	             THEN 'no badges'
                   WHEN sum_badges IN (1,2, 3, 4, 5) THEN 'low number of badges'
				   WHEN sum_badges IN (6, 7, 8,9)    THEN 'moderate number of badges'
				   ELSE 'high number of badges'      END AS number_of_badges_level,
              CASE WHEN category     NOT IN ('beauty', 'body care', 'floral', 'lifestyle') THEN 'is food'
                   ELSE 'is non food' END AS big_category
FROM bmbandd_data
	WHERE category IN ('beauty', 'body care', 'floral', 'lifestyle')
)

SELECT DISTINCT big_category, number_of_badges_level, 
	   COUNT(wf_product_id)            AS total_products,
	   FORMAT(AVG (regular_price),2)   AS average_regular_price,
	   FORMAT(STDDEV(regular_price),2) AS standard_deviation_for_regular_price
FROM food
      WHERE wf_product_id NOT IN (SELECT wf_product_id -- subquery to identify duplicated products
            FROM bmbandd_data
            GROUP BY wf_product_id
	        HAVING COUNT(wf_product_id) > 1)
	  AND regular_price NOT IN (SELECT regular_price -- subquery to remove regular_price = 0
          FROM bmbandd_data
          WHERE regular_price = 0
          GROUP BY regular_price)
     GROUP BY number_of_badges_level, big_category

UNION -- to union both queries for food and non_food

SELECT DISTINCT big_category, number_of_badges_level,
	   COUNT(wf_product_id)            AS total_products,
	   FORMAT(AVG (regular_price),2)   AS average_regular_price,
	   FORMAT(STDDEV(regular_price),2) AS standard_deviation_for_regular_price
FROM non_food
	 WHERE wf_product_id NOT IN (SELECT wf_product_id -- subquery to identify duplicate product
                                        FROM bmbandd_data
                                        GROUP BY wf_product_id
	                                    HAVING COUNT(wf_product_id) > 1)
      AND regular_price NOT IN (SELECT regular_price -- subquery to remove regular_price = 0
                                       FROM bmbandd_data
                                       WHERE regular_price = 0
                                       GROUP BY regular_price)
	GROUP BY number_of_badges_level, big_category
;

-- INSIGHT 2
-- overall average and standard deviation for regular price with whole foods diet badge
SELECT DISTINCT category, 
				total_products,
                presence_of_type_of_badge,
				FORMAT(AVG(regular_price)    OVER(PARTITION BY category),2) AS average_regular_price,
                FORMAT(STDDEV(regular_price) OVER(PARTITION BY category),2) AS standard_deviation_of_average_regular_price
FROM (SELECT *, -- subquery to presence of whole foods diet badge
      COUNT(wf_product_id) OVER(PARTITION BY category) AS total_products,
      CASE WHEN is_whole_foods_diet = 1 THEN 'have whole foods diet badge'
	  ELSE 'others' END AS presence_of_type_of_badge
FROM `bmbandd_data`
      WHERE is_whole_foods_diet = 1
	) AS diet_badge
      WHERE total_products > 30
      AND sum_badges <> 0
      AND wf_product_id NOT IN (SELECT wf_product_id -- to remove duplicate products
                                  FROM bmbandd_data
							  GROUP BY wf_product_id
	                            HAVING COUNT(wf_product_id) > 1)
      AND regular_price NOT IN (SELECT regular_price 	-- to remove regular_price = 0
                                  FROM bmbandd_data
                                 WHERE regular_price = 0
                              GROUP BY regular_price)
	  AND presence_of_type_of_badge NOT IN ('others')

UNION -- to union both queries with filter for is whole foods diet and no whole foods diet

SELECT DISTINCT category, 
				total_products,
                presence_of_type_of_badge,
				FORMAT(AVG(regular_price) OVER(PARTITION BY category),2) AS average_regular_price,
                FORMAT(STDDEV(regular_price) OVER(PARTITION BY category),2) AS standard_deviation_of_average_regular_price
FROM (SELECT *, -- subquery to filter no whole foods diet badge
      COUNT(wf_product_id) OVER(PARTITION BY category) AS total_products,
      CASE WHEN is_whole_foods_diet = 0 THEN 'no whole foods diet badge'
	       ELSE 'others' END AS presence_of_type_of_badge
FROM bmbandd_data
WHERE is_whole_foods_diet = 0
) AS diet_badge
      WHERE total_products > 30
      AND sum_badges <> 0
      AND wf_product_id NOT IN (SELECT wf_product_id
                                  FROM bmbandd_data
                              GROUP BY wf_product_id
	                            HAVING COUNT(wf_product_id) > 1)
      AND regular_price NOT IN (SELECT regular_price
                                  FROM bmbandd_data
                                 WHERE regular_price = 0
                              GROUP BY regular_price)
      AND presence_of_type_of_badge NOT IN ('others')
;

-- overall average and standard deviation for regular price with vegan badge
SELECT DISTINCT category, 
				total_products,
                presence_of_type_of_badge,
				FORMAT(AVG(regular_price) OVER(PARTITION BY category),2) AS average_regular_price,
                FORMAT(STDDEV(regular_price) OVER(PARTITION BY category),2) AS standard_deviation_of_average_regular_price
FROM (SELECT *, -- subquery to categorize vegan badge
      COUNT(wf_product_id) OVER(PARTITION BY category) AS total_products,
      CASE 
      WHEN is_vegan = 1 THEN 'have vegan badge'
	  ELSE 'others' END AS presence_of_type_of_badge
FROM bmbandd_data
WHERE is_vegan = 1
) AS diet_badge
      WHERE total_products > 30
      AND sum_badges <> 0
      AND wf_product_id NOT IN (SELECT wf_product_id -- subquery to remove duplicate products
                                  FROM bmbandd_data
							  GROUP BY wf_product_id
	                            HAVING COUNT(wf_product_id) > 1)
      AND regular_price NOT IN (SELECT regular_price -- subquery to remove regular_price = 0
                                  FROM bmbandd_data
									   WHERE regular_price = 0
						               GROUP BY regular_price)
      AND presence_of_type_of_badge NOT IN ('others')

UNION -- to union both queries with filter is vegan and no vegan

SELECT DISTINCT category, 
				total_products,
                presence_of_type_of_badge,
				FORMAT(AVG(regular_price)    OVER(PARTITION BY category),2) AS average_regular_price,
                FORMAT(STDDEV(regular_price) OVER(PARTITION BY category),2) AS standard_deviation_of_average_regular_price
FROM (SELECT *, -- subquery to categorize vegan badge
             COUNT(wf_product_id)   OVER(PARTITION BY category) AS total_products,
			 CASE WHEN is_vegan = 0 THEN 'no vegan badge'
				  ELSE 'others'     END AS presence_of_type_of_badge
		FROM bmbandd_data
             WHERE is_vegan = 0
) AS diet_badge
      WHERE total_products > 30
	  AND sum_badges <> 0
      AND wf_product_id NOT IN (SELECT wf_product_id -- subquery to remove duplicate products
                                  FROM bmbandd_data
							      GROUP BY wf_product_id
	                              HAVING COUNT(wf_product_id) > 1)
      AND regular_price NOT IN (SELECT regular_price -- subquery to remove regular_price = 0
                                  FROM bmbandd_data
								  WHERE regular_price = 0
							   GROUP BY regular_price)
      AND presence_of_type_of_badge NOT IN ('others')
;

-- count of products with whole foods diet and vegan badge

SELECT DISTINCT category,
				COUNT(wf_product_id)         OVER(PARTITION BY category) AS total_products,
				FORMAT(AVG(regular_price) 	 OVER(PARTITION BY category),2) AS average_regular_price,
                FORMAT(STDDEV(regular_price) OVER(PARTITION BY category),2) AS standard_deviation_of_average_regular_price
FROM bmbandd_data
WHERE is_whole_foods_diet = 1
AND is_vegan =1
AND wf_product_id NOT IN (SELECT wf_product_id -- subquery to remove duplicate products
                            FROM bmbandd_data
                        GROUP BY wf_product_id
	                      HAVING COUNT(wf_product_id) > 1)
AND regular_price NOT IN (SELECT regular_price -- subquery to remove regular_price = 0
                            FROM bmbandd_data
                           WHERE regular_price = 0
						GROUP BY regular_price)
;
